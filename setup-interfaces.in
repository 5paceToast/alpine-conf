#!/bin/sh

PROGRAM=setup-interfaces
PREFIX=

. $PREFIX/lib/libalpine.sh

bridges=""

detect_interfaces() {
	ip addr | grep -v ' lo:' | awk -F : '/^[0-9]*:/ { print $2}'
}

get_first_unconfigured() {
	ls *.noconf 2>/dev/null | head -n 1 | sed 's/.noconf//'
}

get_default_addr() {
	# check if dhcpcd is running
	if pidof dhcpcd > /dev/null && [ -f "$ROOT/var/lib/dhcpc/dhcpcd-$1.info" ]; then
		echo dhcp
	else
		ip addr show $1 | awk '/inet / {print $2}' | head -n 1 | sed 's:/.*::'
	fi
}

get_default_mask() {
	if [ "$1" ] ; then
		ipcalc -m $1 | sed 's/.*=//'
	else
		echo "255.255.255.0"
	fi
}

get_default_gateway() {
	ip route show dev $1 | awk '/^default/ {print $3}'
}


config_iface() {
	local iface=$1
	local prefix=$2
	local address
	local netmask
	local gateway
	local bridge
	local conf=$prefix$iface.conf
	local answer

	if is_xen_dom0; then
		while [ "$answer" != "yes" ] && [ "$answer" != "no" ] ; do
			echon "Do you want to bridge the interface $iface? [no] "
			default_read answer no
		done
	else
		answer="no"
	fi

	if [ "$answer" = "yes" ]; then
		bridge="br"`echo $iface | sed 's/[^0-9]//g'`
		while [ 1 ]; do
			echon "Name of the bridge you would like to create: [$bridge] "
			default_read bridge $bridge
			`echo "$bridges" | grep -q "$bridge"` || break
			echo "Name already in use, please choose another one"
		done
		echo "bridge=${bridge}" > $conf
		bridges="$bridges $bridge"
	fi

	# use ipcalc to validate the address. we do accept /mask
	# we are no interested in the result, only error code, so
	# we send result to /dev/null
	while ! ipcalc -s -m $address >/dev/null 2>&1; do
		address=`get_default_addr $iface`
		[ -z "$address" ] && address="dhcp"
		echon "Ip address for $iface? (or 'dhcp') [$address] "
		default_read address $address
		[ "$address" = "abort" ] && return
		if [ "$address" = "dhcp" ] ; then
			HAS_DHCP=yes
			echo "type=dhcp" >> $conf
			rm $iface.noconf
			return
		fi
	done

	# extract netmask if entered together with address
	if [ "$address" != "${address%%/*}" ]; then
		netmask=$(ipcalc -s -m $address | cut -d= -f2)
	fi

	# use ipcalc -m to validate netmask. we dont accept <addr>/mask suffix
	# so we pass on a dummy mask to ipcalc.
	while ! ipcalc -s -m $netmask/0 >/dev/null 2>&1; do
		netmask=`get_default_mask $address`
		echon "Netmask? [$netmask] "
		default_read netmask "$netmask"
		[ "$netmask" = "abort" ] && return
	done

	# use ipcalc -m to validate netmask. we dont accept <addr>/mask suffix
	# so we pass on a dummy mask to ipcalc.
	while ! ipcalc -s -m $gateway/0 >/dev/null 2>&1; do
		gateway=`get_default_gateway $iface`
		[ -z "$gateway" ] && gateway=none
		echon "Gateway? (or 'none') [$gateway] "
		default_read gateway $gateway
		[ "$gateway" = "abort" ] && return
		[ "$gateway" = "none" ] && gateway=""
		[ -z "$gateway" ] && break
	done
	
	echo "type=static" >> $conf
	echo "address=${address%%/*}" >> $conf  #strip off /mask if there
	echo "netmask=$netmask" >> $conf
	echo "gateway=$gateway" >> $conf

	# print summary
	echo "Configuration for $iface:"
	sed 's/^/  /' $conf
	
	rm $iface.noconf
}

usage() {
        cat <<__EOF__
usage: setup-interfaces [-h] [-i read custom /etc/network/interfaces from stdin]

Setup network interfaces

options:
 -h  Show this help
 -i  Read new contents of /etc/network/interfaces from stdin
__EOF__
        exit 1
}

prompt_for_interfaces() {
	init_tmpdir TMP
	
	cd $TMP
	for i in $(detect_interfaces); do
		touch $i.noconf
	done
	
	index=1
	while ls *.noconf > /dev/null 2>&1 ; do
		echon "Available interfaces are:"
		for i in *.noconf; do
			echon " `basename $i .noconf`"
		done
		echo "."
	
		firstif=`get_first_unconfigured`
		echon "Which one do you want to initialize? (or 'done') [$firstif] "
		default_read iface "$firstif"
	
		[ "$iface" = "done" ] && break
		[ -f $iface.noconf ] || continue
		config_iface $iface $(printf "%.3d~" $index)
		index=$(( $index + 1 ))
	done
	
	echo "type=loopback" > 000~lo.conf
	echo "" > interface
	hostname=$(cat /etc/hostname 2>/dev/null)
	
	for i in *.conf ; do
		iface=`basename $i .conf`
		iface=${iface#[0-9]*~}
		. ./$i
		if [ -n "$bridge" ]; then
			echo "auto $iface $bridge" >> interfaces
			echo "" >> interfaces
			echo "iface $iface inet manual" >> interfaces
			echo -e "\tup ip link set \$IFACE up" >> interfaces
			echo -e "\tdown ip link set \$IFACE down" >> interfaces
			echo "" >> interfaces
			echo "iface $bridge inet $type" >> interfaces
			echo -e "\tpre-up brctl addbr $bridge" >> interfaces
			echo -e "\tpre-up brctl addif $bridge $iface" >> interfaces
		else
			echo "auto $iface" >> interfaces
			echo "iface $iface inet $type" >> interfaces
		fi
		case $type in
		dhcp)
			[ -n "$hostname" ] \
				&& echo -e "\thostname $hostname" >> interfaces
			;;
		static)
			echo -e "\taddress $address" >> interfaces
			echo -e "\tnetmask $netmask" >> interfaces
			[ "$gateway" ] \
				&& echo -e "\tgateway $gateway" >> interfaces
			;;
		esac
		if [ -n "$bridge" ]; then
			echo -e "\tpost-down brctl delif $bridge $iface" >> interfaces
			echo -e "\tpost-down brctl delbr $bridge" >> interfaces
		fi
		echo "" >> interfaces
		bridge=""
	done
	
	while [ "$answer" != "yes" ] && [ "$answer" != "no" ] ; do
		echon "Do you want to do any manual network configuration? [no] "
		default_read answer no
	done

	if [ "$answer" = "yes" ]; then
		case "$EDITOR" in
			nano)	pkg_inst nano;;
			vim)	pkg_inst vim;;
		esac
		${EDITOR:-vi} interfaces
	fi
		
	mkdir -p $ROOT/etc/network
	cp interfaces $ROOT/etc/network/
}

while getopts "hi" opt; do
        case $opt in
                h) usage;;
		i) STDINPUT=1;;
        esac
done

if [ "$STDINPUT" = "1" ]; then
	mkdir -p $ROOT/etc/network
	cat > $ROOT/etc/network/interfaces
else
	prompt_for_interfaces
fi
